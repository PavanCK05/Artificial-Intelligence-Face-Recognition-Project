import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.neural_network import MLPClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load Olivetti faces dataset
RANDOM_STATE = 42
data = fetch_olivetti_faces(shuffle=True, random_state=RANDOM_STATE)
X = data.images  # shape (400, 64, 64)
y = data.target
h, w = X.shape[1], X.shape[2]

print("Dataset shape:", X.shape)
print("Number of classes:", len(np.unique(y)))

# Flatten images
X_flat = X.reshape((X.shape[0], -1))

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X_flat, y, test_size=0.3, stratify=y, random_state=RANDOM_STATE
)
print("Train shape:", X_train.shape, " Test shape:", X_test.shape)

# Build pipeline: Standardize -> PCA -> MLP
n_components = 150

mlp = MLPClassifier(
    hidden_layer_sizes=(256, 64),
    activation="relu",
    solver="adam",
    alpha=1e-4,
    learning_rate="adaptive",
    max_iter=200,
    early_stopping=True,
    random_state=RANDOM_STATE,
)

model = Pipeline(steps=[
    ("scaler", StandardScaler(with_std=True)),
    ("pca", PCA(n_components=n_components, whiten=True, random_state=RANDOM_STATE)),
    ("mlp", mlp)
])

# Train the model
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print(f"Test Accuracy: {acc:.4f}\n")
print("Classification Report:")
print(classification_report(y_test, y_pred, zero_division=0))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Visualize eigenfaces (principal components)
def plot_gallery(images, titles, h, w, n_row=3, n_col=6, suptitle=None):
    plt.figure(figsize=(1.4 * n_col, 1.6 * n_row))
    if suptitle:
        plt.suptitle(suptitle, y=1.02, fontsize=14)
    for i in range(n_row * n_col):
        if i >= images.shape[0]:
            break
        plt.subplot(n_row, n_col, i + 1)
        plt.imshow(images[i].reshape((h, w)), cmap="gray")
        plt.title(titles[i], fontsize=8)
        plt.xticks([])
        plt.yticks([])
    plt.tight_layout()
    plt.show()

pca = model.named_steps["pca"]
eigenfaces = pca.components_.reshape((n_components, h, w))
plot_gallery(eigenfaces[:18], [f"eigenface {i}" for i in range(18)], h, w,
             suptitle="Top PCA Components (Eigenfaces)")

# Show some predictions
n_show = 18
idx = np.random.RandomState(RANDOM_STATE).choice(X_test.shape[0], size=n_show, replace=False)
images_to_show = X_test[idx]
y_true = y_test[idx]
y_hat = y_pred[idx]
titles = [f"T:{t} / P:{p}" for t, p in zip(y_true, y_hat)]
plot_gallery(images_to_show.reshape((-1, h, w)), titles, h, w,
             suptitle="Test Samples: True vs Predicted")


